"use strict";
const metadata_1 = require("../injector/metadata");
const core_1 = require("../core");
/**
 * Action decorator
 * @decorator
 * @function
 * @name Action
 *
 * @param {String} value
 *
 * @description
 * Define name of action to class
 */
exports.Action = (value) => {
    return (Class, key, descriptor) => {
        let type = "Action";
        let metadata = [];
        if (metadata_1.Metadata.hasMetadata(Class, metadata_1.FUNCTION_KEYS)) {
            metadata = metadata_1.Metadata.getMetadata(Class, metadata_1.FUNCTION_KEYS);
        }
        if (metadata.find(item => item.type === type && item.key === key)) {
            throw new TypeError(`Only one action definition is allowed on ${key} ${metadata_1.Metadata.getName(Class, "on class ")}`);
        }
        else if (!metadata_1.Metadata.isDescriptor(descriptor) && !core_1.isEqual(Class, descriptor)) {
            throw new TypeError(`@${type} is allowed ony on function type ${metadata_1.Metadata.getName(Class, "on class ")}`);
        }
        metadata.push({
            type: type,
            key: key,
            value: value
        });
        metadata_1.Metadata.defineMetadata(Class, metadata_1.FUNCTION_KEYS, metadata);
        if (metadata_1.Metadata.isDescriptor(descriptor)) {
            descriptor.configurable = false;
            descriptor.writable = false;
        }
        return Class;
    };
};
//# sourceMappingURL=action.js.map