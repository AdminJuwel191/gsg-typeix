"use strict";
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @decorator
 * @function
 * @name Inject
 *
 * @description
 * Inject is used to define metadata which will be injected at class construct time by Injector
 *
 * @example
 * import {Provider, Inject} from "node-ee";
 * import {MyService} form "./services/my-service";
 *
 * \@Provider([MyService])
 * class AssetLoader{
 *    \@Inject(MyService)
 *    private myService;
 * }
 */
exports.Inject = (value, isMutable) => {
    return (Class, key, paramIndex) => {
        let metadata = [];
        if (metadata_1.Metadata.hasMetadata(Class, metadata_1.INJECT_KEYS)) {
            metadata = metadata_1.Metadata.getMetadata(Class, metadata_1.INJECT_KEYS);
        }
        if (metadata_1.Metadata.isDescriptor(paramIndex)) {
            throw new TypeError(`@Inject is not allowed ${metadata_1.Metadata.getName(Class, "on class ")} on ${paramIndex.value}
      @Inject is allowed only as param type!`);
        }
        metadata.push(core_1.isUndefined(paramIndex) ? {
            value: value,
            isMutable: !!isMutable,
            key: key
        } : {
            value: value,
            paramIndex: paramIndex
        });
        metadata_1.Metadata.defineMetadata(Class, metadata_1.INJECT_KEYS, metadata);
        return Class;
    };
};
//# sourceMappingURL=inject.js.map