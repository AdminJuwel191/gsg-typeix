"use strict";
const logger_1 = require("../logger/logger");
const router_1 = require("../router/router");
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * Module decorator
 * @decorator
 * @function
 * @name Module
 *
 * @param {IModuleMetadata} config
 * @returns {function(any): any}
 *
 * @description
 * Define module in your application
 *
 * @example
 * import {Module, Router} from "node-ee";
 *
 * \@Module({
 *  providers:[Router]
 * })
 * class Application{
 *    constructor(router: Router) {
 *
 *    }
 * }
 */
exports.Module = (config) => (Class) => {
    if (!core_1.isClass(Class)) {
        throw new TypeError(`@Module is allowed only on class`);
    }
    else if (config.controllers.length === 0) {
        throw new TypeError(`@Module must have defined at least one controller`);
    }
    if (!core_1.isArray(config.providers)) {
        config.providers = [];
    }
    // add router to default config
    if (!metadata_1.Metadata.hasProvider(config.providers, router_1.Router)) {
        config.providers.unshift(router_1.Router);
    }
    // add logger to start of providers
    if (!metadata_1.Metadata.hasProvider(config.providers, logger_1.Logger)) {
        config.providers.unshift(logger_1.Logger);
    }
    config.providers = config.providers.map(ProviderClass => metadata_1.Metadata.verifyProvider(ProviderClass));
    metadata_1.Metadata.setComponentConfig(Class, config);
    return Class;
};
//# sourceMappingURL=module.js.map