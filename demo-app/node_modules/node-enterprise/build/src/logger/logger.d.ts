import { Level } from "./level";
/**
 * @license Mit Licence 2015
 * @since 1.0.0
 * @name Logger
 *
 * @constructor
 * @description
 * Logger is a component in easy node application.
 * Logger handler for easy node, there a various type of logs
 * [INFO, TRACE, DEBUG, WARN, ERROR, FATAL]
 * By default only ERROR and FATAL are enabled in production mode.
 * Logger in system is delivered as component
 * @example
 */
export declare class Logger {
    private hooks;
    private levels;
    private enabled;
    private debugLevel;
    constructor();
    /**
     * @since 1.0.0
     * @function
     * @name Logger#setDebugLevel
     *
     * @description
     * Set debug level
     */
    setDebugLevel(value: number): void;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#enable
     *
     * @description
     * enable logger
     */
    enable(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#printToConsole
     *
     * @description
     * Print to console logs
     */
    printToConsole(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#trace
     *
     * @description
     * Trace
     */
    trace(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#info
     *
     * @description
     * Log info case
     */
    info(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#debug
     *
     * @description
     * Debug
     */
    debug(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#warn
     *
     * @description
     * Log warn case
     */
    warn(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#error
     *
     * @description
     * Log error case
     */
    error(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#fatal
     *
     * @description
     * Fatal error
     */
    fatal(message: any, ...args: any[]): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#filter
     * @private
     * @description
     * Get level name
     * This is used internally by logger class
     */
    filter(level: number): Level;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#addHook
     * @param {Function} callback
     *
     * @description
     * Add hook to log output so developer can extend where to store log
     */
    addHook(callback: Function): void;
    /**
     * @since 1.0.0
     * @function
     * @name Logger#log
     * @private
     * @description
     * Write to file and exec hooks
     */
    private log(message, data, level);
}
