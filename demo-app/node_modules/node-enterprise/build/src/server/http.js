"use strict";
const injector_1 = require("../injector/injector");
const http_1 = require("http");
const request_1 = require("./request");
const logger_1 = require("../logger/logger");
const core_1 = require("../core");
const events_1 = require("events");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @function
 * @name httpServer
 * @param {Function} Class httpServer class
 * @param {Number} port httpServer on port
 * @param {String} hostname httpServer on hostname
 * @returns {Injector}
 *
 * @description
 * Use httpServer function to httpServer an Module.
 */
function httpServer(Class, port, hostname) {
    let injector = injector_1.Injector.createAndResolve(Class, []);
    let logger = injector.get(logger_1.Logger);
    let metadata = metadata_1.Metadata.getComponentConfig(Class);
    let server = http_1.createServer();
    server.on("request", (request, response) => {
        let childInjector = injector_1.Injector.createAndResolveChild(injector, request_1.Request, [
            { provide: "contentType", useValue: "text/html" },
            { provide: "modules", useValue: core_1.isPresent(metadata.modules) ? metadata.modules : [] },
            { provide: "controllers", useValue: metadata.controllers },
            { provide: "request", useValue: request },
            { provide: "response", useValue: response },
            { provide: "isCustomError", useValue: false },
            { provide: "isForwarded", useValue: false },
            { provide: "isForwarder", useValue: false },
            { provide: "statusCode", useValue: 200 },
            { provide: "data", useValue: [] },
            events_1.EventEmitter
        ]);
        /**
         * On end destroy injector
         */
        request.on("end", () => childInjector.destroy());
        /**
         * Get request instance
         * @type {any}
         */
        let pRequest = childInjector.get(request_1.Request);
        /**
         * Process request
         */
        pRequest
            .process()
            .catch(error => logger.error("Request.error", {
            stack: error.stack,
            url: request.url,
            error: error
        }));
    });
    if (core_1.isString(hostname)) {
        server.listen(port, hostname);
    }
    else {
        server.listen(port);
    }
    logger.info("Module.info: Server started", { port: port, hostname: hostname });
    server.on("error", (e) => logger.error(e.stack));
    return injector;
}
exports.httpServer = httpServer;
//# sourceMappingURL=http.js.map