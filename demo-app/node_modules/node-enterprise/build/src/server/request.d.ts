import { IAfterConstruct } from "../interfaces/iprovider";
import { ResolvedRoute } from "../interfaces/iroute";
/**
 * @since 1.0.0
 * @class
 * @name Request
 * @constructor
 * @description
 * Request is responsible for handling router result and processing all requests in system
 * This component is used internally by framework
 *
 * @private
 */
export declare class Request implements IAfterConstruct {
    /**
     * @param IncomingMessage
     * @description
     * Value provided by injector which handles request input
     */
    private request;
    /**
     * @param ServerResponse
     * @description
     * Value provided by injector which handles response output
     */
    private response;
    /**
     * @param {Boolean} isCustomError
     * @description
     * Value provided by injector which handles custom error responses
     */
    private isCustomError;
    /**
     * @param {Boolean} isForwarded
     * @description
     * Information internally used by request itself on forwarded requests
     */
    private isForwarded;
    /**
     * @param {Boolean} isForwarder
     * @description
     * Information internally used by request itself on forwarded requests
     */
    private isForwarder;
    /**
     * @param {Array<Buffer>} data
     * @description
     * Data received by client on POST, PATCH, PUT requests
     */
    private data;
    /**
     * @param {Array<IModuleMetadata>} modules
     * @description
     * Lost of modules imported on current module
     */
    private modules;
    /**
     * @param {Array<IProvider|Function>} controllers
     * @description
     * List of controllers assigned to current module
     */
    private controllers;
    /**
     * @param {Number} statusCode
     * @description
     * Request status code default 200
     */
    private statusCode;
    /**
     * @param {Injector} Injector
     * @description
     * Injector which created request
     */
    private injector;
    /**
     * @param {Logger} logger
     * @description
     * Provided by injector
     */
    private logger;
    /**
     * @param {Router} router
     * @description
     * Provided by injector
     */
    private router;
    /**
     * @param {EventEmitter} eventEmitter
     * @description
     * Responsible for handling events
     */
    private eventEmitter;
    /**
     * @param {String} contentType
     * @description
     * Content type
     */
    private contentType;
    /**
     * @param {string} id
     * @description
     * UUID identifier of request
     */
    private id;
    /**
     * @param {Url} url
     * @description
     * Parsed request url
     */
    private url;
    /**
     * @since 1.0.0
     * @function
     * @name Request#destroy
     * @private
     * @description
     * Destroy all references to free memory
     */
    destroy(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#afterConstruct
     * @private
     * @description
     * This function is called by injector after constructor is initialized
     */
    afterConstruct(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#render
     * @param {Buffer|String} response
     * @private
     * @description
     * This method sends data to client
     */
    render(response: string | Buffer): string | Buffer;
    /**
     * @since 1.0.0
     * @function
     * @name Request#handleController
     * @private
     * @description
     * Handle controller instance
     */
    handleController(name: String, actionName: String, resolvedRoute: ResolvedRoute): Promise<any>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#handleModule
     * @private
     * @description
     * Handle module instance
     */
    handleModule(module: String, name: String, action: String, resolvedRoute: ResolvedRoute): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#process
     * @private
     * @description
     * Process request logic
     */
    process(): Promise<any>;
}
