"use strict";
const core_1 = require("../core");
const util_1 = require("util");
const chai_1 = require("chai");
describe("Core functions", () => {
    it("Should be valid string", () => {
        chai_1.assert.isTrue(core_1.isString("value"));
        chai_1.assert.isFalse(core_1.isString(null));
    });
    it("Should be valid boolean", () => {
        chai_1.assert.isTrue(core_1.isBoolean(true));
        chai_1.assert.isFalse(core_1.isBoolean(null));
    });
    it("Should be valid undefined", () => {
        chai_1.assert.isTrue(core_1.isUndefined(undefined));
        chai_1.assert.isFalse(core_1.isUndefined(true));
        chai_1.assert.isFalse(core_1.isUndefined(null));
    });
    it("Should be valid number", () => {
        chai_1.assert.isTrue(util_1.isNumber(1));
        chai_1.assert.isTrue(util_1.isNumber(NaN));
        chai_1.assert.isFalse(util_1.isNumber(undefined));
        chai_1.assert.isFalse(util_1.isNumber(true));
        chai_1.assert.isFalse(util_1.isNumber(null));
    });
    it("Should be valid array", () => {
        chai_1.assert.isTrue(core_1.isArray([]));
        chai_1.assert.isFalse(core_1.isArray({}));
        chai_1.assert.isFalse(core_1.isArray(1));
        chai_1.assert.isFalse(core_1.isArray(NaN));
        chai_1.assert.isFalse(core_1.isArray(undefined));
        chai_1.assert.isFalse(core_1.isArray(true));
        chai_1.assert.isFalse(core_1.isArray(null));
    });
    it("Should be valid null", () => {
        chai_1.assert.isFalse(core_1.isNull([]));
        chai_1.assert.isFalse(core_1.isNull({}));
        chai_1.assert.isFalse(core_1.isNull(1));
        chai_1.assert.isFalse(core_1.isNull(NaN));
        chai_1.assert.isFalse(core_1.isNull(undefined));
        chai_1.assert.isFalse(core_1.isNull(true));
        chai_1.assert.isTrue(core_1.isNull(null));
    });
    it("Should be valid function", () => {
        chai_1.assert.isTrue(core_1.isFunction(Array));
        chai_1.assert.isFalse(core_1.isFunction([]));
        chai_1.assert.isFalse(core_1.isFunction({}));
        chai_1.assert.isFalse(core_1.isFunction(1));
        chai_1.assert.isFalse(core_1.isFunction(NaN));
        chai_1.assert.isFalse(core_1.isFunction(undefined));
        chai_1.assert.isFalse(core_1.isFunction(true));
        chai_1.assert.isFalse(core_1.isFunction(null));
    });
    it("Should be valid date", () => {
        chai_1.assert.isTrue(core_1.isDate(new Date));
        chai_1.assert.isFalse(core_1.isDate([]));
        chai_1.assert.isFalse(core_1.isDate({}));
        chai_1.assert.isFalse(core_1.isDate(1));
        chai_1.assert.isFalse(core_1.isDate(NaN));
        chai_1.assert.isFalse(core_1.isDate(undefined));
        chai_1.assert.isFalse(core_1.isDate(true));
        chai_1.assert.isFalse(core_1.isDate(null));
    });
    it("Should be valid regex", () => {
        chai_1.assert.isTrue(core_1.isRegExp(new RegExp("abc")));
        chai_1.assert.isFalse(core_1.isRegExp([]));
        chai_1.assert.isFalse(core_1.isRegExp({}));
        chai_1.assert.isFalse(core_1.isRegExp(1));
        chai_1.assert.isFalse(core_1.isRegExp(NaN));
        chai_1.assert.isFalse(core_1.isRegExp(undefined));
        chai_1.assert.isFalse(core_1.isRegExp(true));
        chai_1.assert.isFalse(core_1.isRegExp(null));
    });
    it("Should be valid object", () => {
        chai_1.assert.isTrue(core_1.isObject(new RegExp("abc")));
        chai_1.assert.isTrue(core_1.isObject([]));
        chai_1.assert.isTrue(core_1.isObject({}));
        chai_1.assert.isFalse(core_1.isObject(1));
        chai_1.assert.isFalse(core_1.isObject(NaN));
        chai_1.assert.isFalse(core_1.isObject(undefined));
        chai_1.assert.isFalse(core_1.isObject(true));
        chai_1.assert.isFalse(core_1.isObject(null));
    });
    it("Should be present", () => {
        chai_1.assert.isTrue(core_1.isPresent(new RegExp("abc")));
        chai_1.assert.isTrue(core_1.isPresent([]));
        chai_1.assert.isTrue(core_1.isPresent({}));
        chai_1.assert.isTrue(core_1.isPresent(1));
        chai_1.assert.isTrue(core_1.isPresent(NaN));
        chai_1.assert.isFalse(core_1.isPresent(undefined));
        chai_1.assert.isTrue(core_1.isPresent(true));
        chai_1.assert.isFalse(core_1.isPresent(null));
    });
});
//# sourceMappingURL=core.spec.js.map