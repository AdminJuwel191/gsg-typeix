"use strict";
const route_parser_1 = require("../router/route-parser");
const chai_1 = require("chai");
const core_1 = require("../core");
describe("RouterParser", () => {
    it("Initialize", () => {
        let pattern = route_parser_1.RouteParser.parse("/can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>" +
            "-<nice:([a-zA-Z]+)>-now-<only:\\d+>-not/user/<id:\\d+>");
        chai_1.assert.isTrue(pattern instanceof route_parser_1.RouteParser);
    });
    it("Should test patterns on /can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>-<nice:([a-zA-Z]+)>-now-<only:\\d+>-not/user/<id:\\d+>", () => {
        let pattern = route_parser_1.RouteParser.parse("/can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>" +
            "-<nice:([a-zA-Z]+)>-now-<only:\\d+>-not/user/<id:\\d+>");
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.isTrue(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-now-2306-not/user/1412a"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-now-2306-not/user/1412/abc"));
        chai_1.assert.isFalse(pattern.isValid("/igor/should#+do-it/whata-smile-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("//igor/should#+do-it/whata-smile-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-now-2306-not/usera/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-now-2306a-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata-smile-nowa-2306-not/user/1412"));
        chai_1.assert.isTrue(pattern.isValid("/canbeone/igor/should#+do-it/whata1231-smile-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata1231!-smile-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should#+do-it/whata123-smile123-now-2306-not/user/1412"));
        chai_1.assert.isFalse(pattern.isValid("/canbeone/igor/should--be-able-do-it/whata123-smile-now-2306-not/user/1412"));
        chai_1.assert.isTrue(pattern.isValid("/can1454zfhg=?`='(    ()=(one/igor/should#+do-it/whata-smile-now-2306-not/user/1412"));
    });
    it("Should test patterns on /can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>");
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.isTrue(pattern.isValid("/canbeone/igor/should#+do-it/whata"));
        chai_1.assert.isTrue(pattern.isValid("/canbeone/cn/should#+do-it/all"));
        chai_1.assert.isTrue(pattern.isValid("/canbeone/ws/should#+do-it/good"));
    });
    it("Should test patterns on /home/<id:(\\d+)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/home/<id:(\\d+)>");
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.isTrue(pattern.isValid("/home/123"));
        chai_1.assert.isFalse(pattern.isValid("/home/123/"));
        chai_1.assert.isFalse(pattern.isValid("/home/cn/all"));
        chai_1.assert.isFalse(pattern.isValid("/home/abc"));
        chai_1.assert.isFalse(pattern.isValid("/home/abc/"));
        chai_1.assert.isTrue(pattern.isValid("/home/1"));
    });
    it("Should test patterns on /home/<name:(\\w+)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/home/<name:(\\w+)>");
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.isTrue(pattern.isValid("/home/123"));
        chai_1.assert.isTrue(pattern.isValid("/home/works"));
        chai_1.assert.isFalse(pattern.isValid("/home/123/"));
        chai_1.assert.isFalse(pattern.isValid("/home/cn/all"));
        chai_1.assert.isTrue(pattern.isValid("/home/abc"));
        chai_1.assert.isFalse(pattern.isValid("/home/abc/"));
        chai_1.assert.isTrue(pattern.isValid("/home/1"));
    });
    it("Should test patterns on /", () => {
        let pattern = route_parser_1.RouteParser.parse("/");
        chai_1.assert.isTrue(pattern.isValid("/"));
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.throw(() => route_parser_1.RouteParser.parse(""), "Url must start with \/");
        chai_1.assert.throw(() => route_parser_1.RouteParser.parse("abc/"), "Url must start with \/");
    });
    it("Should get correct parameters on /can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/can<any>one/<name:\\w+>/should<now:\\W+>do-it/<see:(\\w+)>" +
            "-<nice:([a-zA-Z]+)>-now-<only:\\d+>-not/user/<id:\\d+>");
        let url = "/can1454zfhg=?`='(    ()=(one/igor/should#+do-it/whata-smile-now-2306-not/user/1412";
        let params = pattern.getParams(url);
        chai_1.assert.isTrue(core_1.isEqual(params, {
            any: "1454zfhg=?`='(    ()=(",
            id: "1412",
            name: "igor",
            nice: "smile",
            now: "#+",
            only: "2306",
            see: "whata"
        }));
        chai_1.expect(pattern.createUrl(params)).to.be.eq(url);
    });
    it("Should test pattern for /assets/<file:(.*)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/assets/<file:(.*)>");
        let url = "/assets/css/main.css";
        chai_1.assert.isTrue(pattern.isValid(url));
        chai_1.assert.isFalse(pattern.isValid(""));
        chai_1.assert.isTrue(pattern.isValid("/assets/css/main.css"));
    });
    it("Should get correct parameters on /assets/<file:(.*)>", () => {
        let pattern = route_parser_1.RouteParser.parse("/assets/<file:(.*)>");
        let url = "/assets/css/main.css";
        chai_1.assert.isTrue(pattern.isValid(url));
        let params = pattern.getParams(url);
        chai_1.assert.isTrue(core_1.isEqual(params, { file: "css/main.css" }));
        chai_1.expect(pattern.createUrl(params)).to.be.eq(url);
    });
});
//# sourceMappingURL=route-parser.spec.js.map